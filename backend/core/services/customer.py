
import logging
from typing import Any

from aiogram import Bot, types
from aiogram.filters.callback_data import CallbackData
from django.conf import settings
from oscar.core.loading import get_model

from core.services.exceptions import InvalidCommandError, CommandWarning
from core.services.utils import send_message
from shop.order.enums import OrderStatus
from shop.order.models import Order
from core.models import User

bot = Bot(token=settings.BOT_TOKEN, parse_mode="HTML")
logger = logging.getLogger(__name__)
OrderLine = get_model("order", "Line")


class CustomerOrderNotifier:
   def __init__(self, order_pk: int):
       self.order_pk: int = order_pk
       self.order: Order | None = None
       self.customer: User | None = None

   def _load_data(self) -> None:
       try:
           self.order = Order.objects.select_related("user").get(pk=self.order_pk)
       except Order.DoesNotExist:
           raise InvalidCommandError(f"Order with pk={self.order_pk} does not exist")

       if self.order.user and self.order.user.telegram_chat_id:
           self.customer = self.order.user
       else:
           raise InvalidCommandError(
               f"Cannot get customer for order with pk={self.order_pk}"
           )

   def _prepare_message(self) -> tuple[str, Any]:
       match self.order.status:
           case OrderStatus.DELIVERED:
               text = (
                   f"üéØ –í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{self.order.number} –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –í—ã–ø–æ–ª–Ω–µ–Ω!</b> ‚úÖ\n\n"
                   "–ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—ã–±–æ—Ä! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!‚ù§Ô∏è‚Äçüî•\n\n"
                   "<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!</b>"
               )
           case OrderStatus.CANCELLED:
               text = (
                   f"üéØ–ü–æ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>‚Ññ{self.order.number} –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø–æ–ª–Ω—ã–π, –∏–ª–∏ –∂–µ —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç!</b>\n\n"
                   "–û–±—ã—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Å—Ä–∞–∑—É, –Ω–æ –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π "
                   "–∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–º. –ù–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç –±—ã–ª —É—Å–ø–µ—à–µ–Ω.\n\n"
                   "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –í–∞—à –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –æ—Å—Ç–∞–ª—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º! "
                   "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –≤–Ω–æ–≤—å, –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
               )
           case _:
               raise CommandWarning(
                   f"Unsupported order status {self.order.status} pk={self.order_pk}"
               )

       keyboard = types.InlineKeyboardMarkup(
           inline_keyboard=[[
               types.InlineKeyboardButton(
                   text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑", 
                   web_app=types.WebAppInfo(url=f"{settings.FRONTEND_URL}/order/{self.order.number}")
               )
           ]]
       )
       return text, keyboard

   def notify(self) -> None:
       try:
           self._load_data()
           message, keyboard = self._prepare_message()
           send_message(
               bot, self.customer.telegram_chat_id, message, reply_markup=keyboard
           )
           
       except CommandWarning as err:
           logger.warning(err)
       except Exception as err:
           logger.exception(err)


class RequestLoginCodeCf(CallbackData, prefix="mgr_req_code"):
   line_id: int
   email: str


class CustomerAccountCodeNotifier:
   def __init__(self, user: User, email: str, line_id: int):
       self.user: User = user
       self.email: str = email
       self.line_id: int = line_id

       self.order: Order = OrderLine.objects.get(pk=line_id).order

   def _prepare_message(self) -> tuple[str, Any]:
       text = (
           f"üéØ–ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>‚Ññ{self.order.number}</b> –∫ –ø–æ—á—Ç–µ {self.email} —É–∫–∞–∑–∞–Ω <b>–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!</b>\n\n"
           f"‚ùóÔ∏è<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫, –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥  "
           f"–∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É</b>\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
       )
       keyboard = types.InlineKeyboardMarkup(
           inline_keyboard=[

               [
                   types.InlineKeyboardButton(
                       text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
                       web_app=types.WebAppInfo(url=f"{settings.FRONTEND_URL}/order/{self.order.number}")
                   )
               ]
           ]
       )
       return text, keyboard

   def notify(self) -> None:
       if not self.user.telegram_chat_id:
           logger.warning(f"User {self.user.pk} has no telegram_chat_id")
           return

       message, keyboard = self._prepare_message()
       send_message(bot, self.user.telegram_chat_id, message, reply_markup=keyboard)


class CustomerFailedPaymentNotifier:
   def __init__(self, order_number: str):
       self.order_number = order_number
       self.order = None
       self.customer = None

   def _load_data(self):
       try:
           self.order = Order.objects.get(number=self.order_number)
           self.customer = self.order.user
       except Order.DoesNotExist:
           raise InvalidCommandError(
               f"Order with number={self.order_number} does not exist"
           )

       if self.customer is None or self.customer.telegram_chat_id is None:
           raise InvalidCommandError(
               f"Cannot get customer for order with number={self.order_number}"
           )

   def _prepare_message(self) -> tuple[str, Any]:
       text = (
           f"üí° –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É "
           f"<b>{self.order.number}</b>. \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã "
           f"–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
       )
       keyboard = types.InlineKeyboardMarkup(
           inline_keyboard=[[
               types.InlineKeyboardButton(
                   text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
                   web_app=types.WebAppInfo(url=f"{settings.FRONTEND_URL}/order/{self.order.number}")
               )
           ]]
       )
       return text, keyboard

   def notify(self) -> None:
       try:
           self._load_data()
           message, keyboard = self._prepare_message()
           send_message(
               bot, self.customer.telegram_chat_id, message, reply_markup=keyboard
           )
       except Exception as err:
           logger.warning(err)


class CustomerSuccessOrderNotifier(CustomerFailedPaymentNotifier):
   def _prepare_message(self) -> tuple[str, Any]:
       text = (
           f"üéØ–û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É <b>‚Ññ{self.order.number}</b> –Ω–∞ —Å—É–º–º—É <b>{self.order.total_incl_tax} —Ä—É–±. "
           f"–ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b> ‚úÖ\n\n <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!</b>"
       )
       keyboard = types.InlineKeyboardMarkup(
           inline_keyboard=[[
               types.InlineKeyboardButton(
                   text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
                   web_app=types.WebAppInfo(url=f"{settings.FRONTEND_URL}/order/{self.order.number}")
               )
           ]]
       )
       return text, keyboard

class CustomerInvalidEmailNotifier:
    def __init__(self, user: User, email: str, line_id: int):
        self.user: User = user
        self.email: str = email
        self.line_id: int = line_id

        self.order: Order = OrderLine.objects.get(pk=line_id).order

    def _prepare_message(self) -> tuple[str, Any]:
        text = (
            f"üéØ –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É <b>‚Ññ{self.order.number}</b> —É–∫–∞–∑–∞–Ω <b>–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!</b>\n\n"
            f"‚ùóÔ∏è<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥, –∞ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.</b>\n\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
                        web_app=types.WebAppInfo(url=f"{settings.FRONTEND_URL}/order/{self.order.number}")
                    )
                ]
            ]
        )
        return text, keyboard

    def notify(self) -> None:
        if not self.user.telegram_chat_id:
            logger.warning(f"User {self.user.pk} has no telegram_chat_id")
            return

        message, keyboard = self._prepare_message()
        send_message(bot, self.user.telegram_chat_id, message, reply_markup=keyboard)