
# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# import asyncio
# from telegram import Bot
# import os
# import logging
# from typing import List

# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# )
# logger = logging.getLogger(__name__)

# app = FastAPI()

# # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
# class OrderLineModel(BaseModel):
#     product_title: str
#     quantity: int
#     mailbox: str
#     code: str

# class OrderModel(BaseModel):
#     number: str
#     lines: List[OrderLineModel]
#     total_incl_tax: float
#     client_id: str

# # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
# TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
#     raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# async def send_order_to_telegram(order: OrderModel):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram —á–∞—Ç"""
#     message = f"üéØNew order: ‚Ññ{order.number}\n"

#     for i, line in enumerate(order.lines):
#         star_emoji = "üåü" if i == 0 else "‚≠êÔ∏è"
#         message += (
#             f"{star_emoji}{line.product_title} - {line.quantity} —à—Ç.\n"
#             f"üì® mailbox: {line.mailbox}\n"
#             f"üí¨ code: {line.code}\n"
#         )

#     message += (
#         f"üí≥–ù–∞ —Å—É–º–º—É - {order.total_incl_tax}‚ÇΩ\n"
#         f"üë§Client ID: {order.client_id}"
#     )

#     try:
#         bot = Bot(token=TELEGRAM_TOKEN)
#         await bot.send_message(
#             chat_id=TELEGRAM_CHAT_ID,
#             text=message
#         )
#         logger.info(f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
#     except Exception as e:
#         error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order.number} –≤ Telegram: {str(e)}"
#         logger.error(error_msg)
#         raise HTTPException(status_code=500, detail=error_msg)

# @app.post("/order/notify")
# async def notify_order(order: OrderModel):
#     """Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
#     try:
#         await send_order_to_telegram(order)
#         return {"status": "success", "message": f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
#         raise HTTPException(status_code=500, detail=str(e))

# @app.get("/health")
# async def health_check():
#     """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
#     return {"status": "healthy"}

# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8001)











# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# import asyncio
# from telegram import Bot
# import os
# import logging
# from typing import List, Optional

# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# )
# logger = logging.getLogger(__name__)

# app = FastAPI()

# # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
# class OrderLineModel(BaseModel):
#     product_title: str
#     quantity: int
#     mailbox: str
#     code: str
#     type: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è LINK –∏ URL_LINK

# class OrderModel(BaseModel):
#     number: str
#     lines: List[OrderLineModel]
#     total_incl_tax: float
#     client_id: str

# # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7673463783:AAHZpW83AVUjAQnEI-AANmg8lXk7etfOmqE')
# TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '-1002250405760')
# # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å LINK –∏ URL_LINK
# # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω—É–∂–Ω—ã–π ID —á–∞—Ç–∞
# TELEGRAM_LINKS_CHAT_ID = "-1002351137755"

# # –ï—Å–ª–∏ TELEGRAM_LINKS_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
# if not TELEGRAM_LINKS_CHAT_ID:
#     # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç 
#     # –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
#     TELEGRAM_LINKS_CHAT_ID = os.getenv('TELEGRAM_LINKS_CHAT_ID_BACKUP', TELEGRAM_CHAT_ID)
#     logger.warning(
#         "TELEGRAM_LINKS_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
#         "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å TELEGRAM_LINKS_CHAT_ID "
#         "–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ —Ç–∏–ø–∞ LINK –∏ URL_LINK."
#     )

# # –î–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø–æ–∑–∂–µ)
# DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:W8gR0kfpR2mAMqRBApOdw15CVpmHMt7f@db:5432/supercell')
# DB_NAME = os.getenv('DB_NAME', 'supercell')
# DB_USER = os.getenv('DB_USER', 'user')
# DB_PASSWORD = os.getenv('DB_PASSWORD', 'W8gR0kfpR2mAMqRBApOdw15CVpmHMt7f')

# async def send_order_to_telegram(order: OrderModel):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram —á–∞—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ LINK –∏ URL_LINK"""
#     message = f"üéØNew order: ‚Ññ{order.number}\n"

#     # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
#     has_link_types = False
    
#     # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#     logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {order.number}")
#     logger.info(f"–¢–∏–ø—ã –ª–∏–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ: {[line.type for line in order.lines]}")
    
#     for line in order.lines:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
#         if line.type and str(line.type).upper() in ["LINK", "URL_LINK"]:
#             has_link_types = True
#             logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–∏–Ω–∏—è —Å —Ç–∏–ø–æ–º {line.type}")
#             break
    
#     logger.info(f"has_link_types = {has_link_types}")
    
#     # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ª–∏–Ω–∏–π —Å —Ç–∏–ø–∞–º–∏ LINK –∏–ª–∏ URL_LINK
#     chat_id = TELEGRAM_LINKS_CHAT_ID if has_link_types else TELEGRAM_CHAT_ID
    
#     logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π chat_id: {chat_id}")
#     logger.info(f"TELEGRAM_CHAT_ID: {TELEGRAM_CHAT_ID}")
#     logger.info(f"TELEGRAM_LINKS_CHAT_ID: {TELEGRAM_LINKS_CHAT_ID}")
    
#     for i, line in enumerate(order.lines):
#         star_emoji = "üåü" if i == 0 else "‚≠êÔ∏è"
#         message += (
#             f"{star_emoji}{line.product_title} - {line.quantity} —à—Ç.\n"
#             f"üì® mailbox: {line.mailbox}\n"
#             f"üí¨ code: {line.code}\n"
#         )
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
#         if line.type:
#             message += f"üîó type: {line.type}\n"

#     message += (
#         f"üí≥–ù–∞ —Å—É–º–º—É - {order.total_incl_tax}‚ÇΩ\n"
#         f"üë§Client ID: {order.client_id}"
#     )

#     try:
#         bot = Bot(token=TELEGRAM_TOKEN)
#         await bot.send_message(
#             chat_id=chat_id,
#             text=message
#         )
        
#         chat_type = "LINKS" if has_link_types else "–æ—Å–Ω–æ–≤–Ω–æ–π"
#         logger.info(f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_type} Telegram —á–∞—Ç (ID: {chat_id})")
#     except Exception as e:
#         error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order.number} –≤ Telegram: {str(e)}"
#         logger.error(error_msg)
#         raise HTTPException(status_code=500, detail=error_msg)

# @app.post("/order/notify")
# async def notify_order(order: OrderModel):
#     """Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
#     try:
#         await send_order_to_telegram(order)
#         return {"status": "success", "message": f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
#         raise HTTPException(status_code=500, detail=str(e))

# @app.get("/health")
# async def health_check():
#     """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
#     return {"status": "healthy"}

# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8001)





from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import asyncio
from telegram import Bot
import os
import logging
import json
from typing import List, Optional

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI()

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class OrderLineModel(BaseModel):
    product_title: str
    quantity: int
    mailbox: str
    code: str
    type: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è LINK –∏ URL_LINK

class OrderModel(BaseModel):
    number: str
    lines: List[OrderLineModel]
    total_incl_tax: float
    client_id: str

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7673463783:AAHZpW83AVUjAQnEI-AANmg8lXk7etfOmqE')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '-1002250405760')
TELEGRAM_LINKS_CHAT_ID = "-1002351137755"

if not TELEGRAM_LINKS_CHAT_ID:
    TELEGRAM_LINKS_CHAT_ID = os.getenv('TELEGRAM_LINKS_CHAT_ID_BACKUP', TELEGRAM_CHAT_ID)
    logger.warning(
        "TELEGRAM_LINKS_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    )

async def send_order_to_telegram(order: OrderModel):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram —á–∞—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ LINK –∏ URL_LINK"""
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info("============ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ö–ê–ó–ê ============")
    logger.info(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.number}")
    logger.info(f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.total_incl_tax}")
    logger.info(f"ID –∫–ª–∏–µ–Ω—Ç–∞: {order.client_id}")
    logger.info("–°—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞:")
    
    # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞
    for idx, line in enumerate(order.lines):
        logger.info(f"  –°—Ç—Ä–æ–∫–∞ {idx+1}:")
        for field_name, field_value in line.dict().items():
            logger.info(f"    {field_name}: {field_value}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info("–ü–æ–ª–Ω—ã–π JSON –∑–∞–∫–∞–∑–∞:")
    logger.info(json.dumps(order.dict(), indent=2, ensure_ascii=False))
    logger.info("============ –ö–û–ù–ï–¶ –°–¢–†–£–ö–¢–£–†–´ –ó–ê–ö–ê–ó–ê ============")

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    message = f"üéØNew order: ‚Ññ{order.number}\n"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
    has_link_types = False
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö
    logger.info(f"–¢–∏–ø—ã –ª–∏–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ: {[line.type for line in order.lines]}")
    
    for line in order.lines:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if line.type and str(line.type).upper() in ["LINK", "URL_LINK"]:
            has_link_types = True
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ª–∏–Ω–∏—è —Å —Ç–∏–ø–æ–º {line.type}")
            break
    
    logger.info(f"has_link_types = {has_link_types}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ª–∏–Ω–∏–π —Å —Ç–∏–ø–∞–º–∏ LINK –∏–ª–∏ URL_LINK
    chat_id = TELEGRAM_LINKS_CHAT_ID if has_link_types else TELEGRAM_CHAT_ID
    
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π chat_id: {chat_id}")
    
    for i, line in enumerate(order.lines):
        star_emoji = "üåü" if i == 0 else "‚≠êÔ∏è"
        message += (
            f"{star_emoji}{line.product_title} - {line.quantity} —à—Ç.\n"
            f"üì® mailbox: {line.mailbox}\n"
            f"üí¨ code: {line.code}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if line.type:
            message += f"üîó type: {line.type}\n"

    message += (
        f"üí≥–ù–∞ —Å—É–º–º—É - {order.total_incl_tax}‚ÇΩ\n"
        f"üë§Client ID: {order.client_id}"
    )

    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.send_message(
            chat_id=chat_id,
            text=message
        )
        
        chat_type = "LINKS" if has_link_types else "–æ—Å–Ω–æ–≤–Ω–æ–π"
        logger.info(f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_type} Telegram —á–∞—Ç (ID: {chat_id})")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order.number} –≤ Telegram: {str(e)}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

@app.post("/order/notify")
async def notify_order(order: OrderModel):
    """Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.number}")
        await send_order_to_telegram(order)
        return {"status": "success", "message": f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)