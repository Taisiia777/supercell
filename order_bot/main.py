from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import asyncio
from telegram import Bot
import os
from datetime import datetime
import logging
from typing import Optional, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class OrderLineModel(BaseModel):
    product_id: int
    quantity: int
    price_incl_tax: float
    product_title: str
    
class OrderModel(BaseModel):
    order_id: int
    number: str
    user_name: Optional[str]
    phone: Optional[str]
    lines: List[OrderLineModel]
    total_incl_tax: float
    shipping_address: Optional[str]
    seller_name: Optional[str]
    status: str
    date_placed: datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=TELEGRAM_TOKEN)

async def send_order_to_telegram(order: OrderModel):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram —á–∞—Ç"""
    
    message = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.number}\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user_name or '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"üì¶ –ó–∞–∫–∞–∑:\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    for line in order.lines:
        message += (
            f"- {line.product_title} x{line.quantity} - "
            f"{line.price_incl_tax}‚ÇΩ\n"
        )
    
    message += (
        f"\nüí∞ –ò—Ç–æ–≥–æ: {order.total_incl_tax}‚ÇΩ\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.shipping_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü: {order.seller_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìã –°—Ç–∞—Ç—É—Å: {order.status}\n"
        f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.date_placed.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        logger.info(f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ #{order.number} –≤ Telegram: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")

@app.post("/order/notify")
async def notify_order(order: OrderModel):
    """Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    try:
        await send_order_to_telegram(order)
        return {"status": "success", "message": f"–ó–∞–∫–∞–∑ #{order.number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy"}