# import logging
# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
# import asyncio
# import random
# from datetime import datetime, time
# import json
# import os

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
# logger = logging.getLogger(__name__)

# # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–≤–æ–π ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
# ADMIN_ID = '677822370'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# # –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
# CATS = {
#     'welcome': 'üê±',
#     'happy': 'üò∫',
#     'love': 'üòª',
#     'yum': 'üò∏',
#     'hug': 'ü§ó',
#     'kiss': 'üòò',
#     'paw': 'üêæ',
#     'sleepy': 'üò¥',
#     'angel': 'üòá',
#     'heart': 'üíï',
#     'sparkles': '‚ú®',
#     'flower': 'üå∏',
# }

# # –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∏–∫–æ–≤ (URL) - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
# CAT_PICS = [
#     # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
#     "https://i.pinimg.com/736x/17/2a/9b/172a9b55bf3e9f5c898cf7c4bbf640d5.jpg",
#     "https://i.pinimg.com/736x/10/bc/bd/10bcbdc51fdacda178fbf70267e19251.jpg",
#     "https://i.pinimg.com/736x/8c/4f/f4/8c4ff4d8cdfe75284c142e3d692637a7.jpg",
#     "https://i.pinimg.com/736x/60/8c/73/608c734c72422e72f68cd5d06be1b400.jpg",
#     "https://i.pinimg.com/736x/d6/f2/38/d6f238dcf1e585ef7bc421a18cc7538f.jpg",
#     "https://i.pinimg.com/736x/85/61/98/8561985bacec7121a94c572257b4b6ca.jpg",
#     "https://i.pinimg.com/736x/f8/37/13/f83713f01951d89720c5665c4a607ef4.jpg",
#     "https://i.pinimg.com/736x/73/fa/76/73fa76b27c9934abcefa64fec4d31200.jpg",
#     "https://i.pinimg.com/736x/28/8a/f4/288af49966e71c911210cbe91107695d.jpg"
# ]

# # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ç–∏–∫–∏ - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
# DAILY_CATS = {
#     0: {  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
#         'pic': 'https://i.pinimg.com/736x/b1/d3/32/b1d3325adb7bc99ccf093b2a54386d29.jpg',
#         'message': f'{CATS["love"]} –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –° –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª—å–∫–æ–π! –ü—É—Å—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —É—é—Ç–Ω—ã–º, –∫–∞–∫ –º—É—Ä—á–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞! {CATS["sparkles"]}'
#     },
#     1: {  # –í—Ç–æ—Ä–Ω–∏–∫
#         'pic': 'https://i.pinimg.com/736x/b2/62/dc/b262dcd0d73f3ae36fbb9d7fd42f4279.jpg',
#         'message': f'{CATS["happy"]} –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞, –º–∏–ª–∞—è! –ö–æ—Ç–∏–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–±–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±–Ω–∏–º–∞—à–∫–∏ –∏ –∂–µ–ª–∞–µ—Ç —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! {CATS["hug"]}'
#     },
#     2: {  # –°—Ä–µ–¥–∞
#         'pic': 'https://i.pinimg.com/736x/ea/ab/45/eaab4559698723097225953ce496f665.jpg',
#         'message': f'{CATS["yum"]} –°–µ—Ä–µ–¥–∏–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏! –ö–æ—Ç–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ç–µ–±–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—Ñ–µ —Å –ª—é–±–æ–≤—å—é. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å–æ –≤—Å–µ–º! {CATS["kiss"]}'
#     },
#     3: {  # –ß–µ—Ç–≤–µ—Ä–≥
#         'pic': 'https://i.pinimg.com/736x/39/83/9b/39839b8fe7218ada38d43cdd802a4cda.jpg',
#         'message': f'{CATS["angel"]} –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ —á–µ—Ç–≤–µ—Ä–≥–∞! –ö–æ—Ç–∏–∫ –º—É—Ä–ª—ã—á–µ—Ç –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è! {CATS["heart"]}'
#     },
#     4: {  # –ü—è—Ç–Ω–∏—Ü–∞
#         'pic': 'https://i.pinimg.com/736x/0f/94/90/0f9490bd5c125b6f2236598002d2df4f.jpg',
#         'message': f'{CATS["sparkles"]} –£—Ä–∞, –ø—è—Ç–Ω–∏—Ü–∞! –ö–æ—Ç–∏–∫ —Ç–∞–Ω—Ü—É–µ—Ç –æ—Ç —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ —á—É–¥–µ—Å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏! {CATS["flower"]}'
#     },
#     5: {  # –°—É–±–±–æ—Ç–∞
#         'pic': 'https://i.pinimg.com/736x/69/ad/a6/69ada6196ac6d669180a412455198fdf.jpg',
#         'message': f'{CATS["sleepy"]} –°—É–±–±–æ—Ç–Ω–µ–µ —É—Ç—Ä–æ! –ö–æ—Ç–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –≤ —É—é—Ç–µ –∏ —Ä–∞–¥–æ—Å—Ç–∏. –¢—ã –∑–∞—Å–ª—É–∂–∏–ª–∞ –æ—Ç–¥—ã—Ö! {CATS["love"]}'
#     },
#     6: {  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
#         'pic': 'https://i.pinimg.com/736x/17/2a/9b/172a9b55bf3e9f5c898cf7c4bbf640d5.jpg',
#         'message': f'{CATS["hug"]} –ù–µ–∂–Ω–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è! –ö–æ—Ç–∏–∫ —à–ª—ë—Ç —Ç–µ–±–µ –ª—É—á–∏–∫–∏ –ª—é–±–≤–∏ –∏ —Ç—ë–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è! {CATS["paw"]}'
#     }
# }

# # –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–≤—É—à–∫–∏
# COMPLIMENTS = [
#     "–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞! üíï",
#     "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –æ—Å–≤–µ—â–∞–µ—Ç –≤–µ—Å—å –º–∏—Ä! ‚ú®",
#     "–¢—ã —Å–∞–º–∞—è –º–∏–ª–∞—è –Ω–∞ —Å–≤–µ—Ç–µ! üå∏",
#     "–ö–æ—Ç–∏–∫–∏ –º—É—Ä—á–∞—Ç –æ—Ç —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç—ã! üòª",
#     "–¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ - —è—Ä–∫–∞—è –∏ —Ç—ë–ø–ª–∞—è! ‚òÄÔ∏è",
#     "–í—Å–µ –∫–æ—Ç–∏–∫–∏ –º–∏—Ä–∞ —Ö–æ—Ç—è—Ç —Å —Ç–æ–±–æ–π –¥—Ä—É–∂–∏—Ç—å! üê±",
#     "–¢—ã –∏–∑–ª—É—á–∞–µ—à—å –¥–æ–±—Ä–æ—Ç—É –∏ –ø–æ–∑–∏—Ç–∏–≤! üåà",
#     "–¢–≤–æ–∏ –≥–ª–∞–∑–∫–∏ —Å–∏—è—é—Ç –∫–∞–∫ –∑–≤—ë–∑–¥–æ—á–∫–∏! ‚≠ê",
# ]

# # –ú–∏–ª—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö
# CAT_FACTS = [
#     "–ö–æ—Ç–∏–∫–∏ —Ç—Ä–∞—Ç—è—Ç 70% –∂–∏–∑–Ω–∏ –Ω–∞ —Å–æ–Ω. –ú–µ—á—Ç–∞! üò¥",
#     "–ö–æ–≥–¥–∞ –∫–æ—Ç–∏–∫ —Ç—Ä—ë—Ç—Å—è –æ —Ç–µ–±—è - –æ–Ω –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ–±—è –∫–∞–∫ —Å–≤–æ—é —Å–µ–º—å—é! üíï",
#     "–ö–æ—Ç–∏–∫–∏ –º—É—Ä—á–∞—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∂–∏–≤–ª–µ–Ω–∏—é –∫–æ—Å—Ç–µ–π! ü¶¥",
#     "–£ –∫–æ—Ç–∏–∫–æ–≤ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ª—é–¥—å–º–∏! üó£Ô∏è",
#     "–ö–æ—Ç–∏–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ '–¥–æ–±—ã—á—É' –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è, —á—Ç–æ —Ç—ã –Ω–µ —É–º–µ–µ—à—å –æ—Ö–æ—Ç–∏—Ç—å—Å—è! üê≠",
#     "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–æ—Ä–≥–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ - —ç—Ç–æ –ø–æ—Ü–µ–ª—É–π! üòò",
#     "–ö–æ—Ç–∏–∫–∏ –≤–∏–¥—è—Ç –≤ 6 —Ä–∞–∑ –ª—É—á—à–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ! üëÄ",
#     "–£ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–æ—Å–∞, –∫–∞–∫ —É –ª—é–¥–µ–π –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤! üëÉ",
# ]

# # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤
# MENU = {
#     'tea': '–ß–∞–π',
#     'tea_milk': '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
#     'coffee': '–ö–æ—Ñ–µ'
# }

# # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
# current_orders = {}

# # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# USERS_FILE = 'users.json'

# # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
# def load_users():
#     if os.path.exists(USERS_FILE):
#         with open(USERS_FILE, 'r') as f:
#             return json.load(f)
#     return {}

# # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
# def save_users(users):
#     with open(USERS_FILE, 'w') as f:
#         json.dump(users, f)

# # –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: chat_id}
# registered_users = load_users()

# async def send_daily_cat(context: ContextTypes.DEFAULT_TYPE):
#     """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –≤ 9:00"""
#     current_day = datetime.now().weekday()
#     daily_cat = DAILY_CATS[current_day]
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
#     for user_id, chat_id in registered_users.items():
#         try:
#             await context.bot.send_photo(
#                 chat_id=chat_id,
#                 photo=daily_cat['pic'],
#                 caption=daily_cat['message']
#             )
#             logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
#     logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# def setup_daily_cat_job(application):
#     """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ç–∏–∫–∞ –≤ 9:00"""
#     job_queue = application.job_queue
    
#     # –ó–∞–¥–∞—ë–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - 9:00
#     send_time = time(hour=9, minute=0, second=0)
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
#     job_queue.run_daily(
#         send_daily_cat,
#         time=send_time,
#         name='daily_cat'
#     )
    
#     logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –≤ 9:00")

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –≤—ã–∑–æ–≤
#     if update.message:
#         # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
#         user = update.effective_user
#         chat_id = update.effective_chat.id
#     else:
#         # –í—ã–∑–æ–≤ –∏–∑ callback (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
#         query = update.callback_query
#         user = query.from_user
#         chat_id = query.message.chat_id
    
#     # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
#     if str(user.id) not in registered_users:
#         registered_users[str(user.id)] = chat_id
#         save_users(registered_users)
#         logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.id}")
    
#     welcome_message = (
#         f"{CATS['welcome']} –ú—è—É-–º—è—É, {user.first_name}! {CATS['love']}\n\n"
#         f"–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—Ç–æ–∫–æ—Ñ–µ–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! {CATS['happy']}\n\n"
#         f"–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è:\n"
#         f"‚òï –í–æ–ª—à–µ–±–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
#         f"üê± –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏\n"
#         f"üíï –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –æ–±–Ω–∏–º–∞—à–∫–∏\n\n"
#         f"–ß—Ç–æ –∂–µ–ª–∞–µ—à—å, —Å–æ–ª–Ω—ã—à–∫–æ? {CATS['sparkles']}\n\n"
#         f"P.S. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏–∫–∞ –¥–Ω—è! üåÖ"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"‚òï –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", callback_data='drinks_menu')],
#         [InlineKeyboardButton(f"{CATS['love']} –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", callback_data='compliment')],
#         [InlineKeyboardButton(f"{CATS['paw']} –ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='pet_cat')],
#         [InlineKeyboardButton(f"üì∏ –ö–æ—Ç–∏–∫ –¥–Ω—è", callback_data='cat_pic')],
#         [InlineKeyboardButton(f"üìö –§–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö", callback_data='cat_fact')],
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     if update.message:
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∫–æ—Ç–∏–∫–∞
#         await update.message.reply_photo(
#             photo=random.choice(CAT_PICS),
#             caption=welcome_message,
#             reply_markup=reply_markup
#         )
#     else:
#         # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await query.edit_message_caption(
#             caption=welcome_message,
#             reply_markup=reply_markup
#         )

# async def show_drinks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤"""
#     query = update.callback_query
#     await query.answer()
    
#     message = f"{CATS['yum']} –ß—Ç–æ –±—É–¥–µ–º –ø–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?\n\n"
    
#     keyboard = []
#     for drink_id, drink_name in MENU.items():
#         message += f"‚Ä¢ {drink_name}\n"
#         keyboard.append([InlineKeyboardButton(
#             f"{CATS['yum']} {drink_name}", 
#             callback_data=f'drink_{drink_id}'
#         )])
    
#     keyboard.append([InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message + f"\n{CATS['paw']} –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
#         reply_markup=reply_markup
#     )

# async def customize_drink(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–∏—Ç–∫–∞ - —Å–∞—Ö–∞—Ä –∏ –ø–µ—á–µ–Ω—å–∫–∏"""
#     query = update.callback_query
#     await query.answer()
    
#     drink_id = query.data.split('_')[1]
#     user_id = query.from_user.id
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞
#     if user_id not in current_orders:
#         current_orders[user_id] = {}
#     current_orders[user_id]['drink'] = drink_id
    
#     message = (
#         f"{CATS['sparkles']} –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä - {MENU[drink_id]}!\n\n"
#         f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª–∏:\n\n"
#         f"üç¨ –î–æ–±–∞–≤–∏—Ç—å —Å–∞—Ö–∞—Ä?"
#     )
    
#     keyboard = [
#         [
#             InlineKeyboardButton("‚úÖ –î–∞, —Å —Å–∞—Ö–∞—Ä–æ–º", callback_data=f'sugar_yes_{drink_id}'),
#             InlineKeyboardButton("‚ùå –ù–µ—Ç, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", callback_data=f'sugar_no_{drink_id}')
#         ],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def ask_sugar_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞"""
#     query = update.callback_query
#     await query.answer()
    
#     data = query.data.split('_')
#     drink_id = data[2]
#     user_id = query.from_user.id
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —Å–∞—Ö–∞—Ä –Ω—É–∂–µ–Ω
#     current_orders[user_id]['sugar'] = True
    
#     message = (
#         f"{CATS['sparkles']} –° —Å–∞—Ö–∞—Ä–æ–º, –æ—Ç–ª–∏—á–Ω–æ!\n\n"
#         f"ü•Ñ –°–∫–æ–ª—å–∫–æ –ª–æ–∂–µ—á–µ–∫ –ø–æ–ª–æ–∂–∏—Ç—å?"
#     )
    
#     keyboard = [
#         [
#             InlineKeyboardButton("1 –ª–æ–∂–µ—á–∫–∞", callback_data=f'sugar_1_{drink_id}'),
#             InlineKeyboardButton("2 –ª–æ–∂–µ—á–∫–∏", callback_data=f'sugar_2_{drink_id}'),
#             InlineKeyboardButton("3 –ª–æ–∂–µ—á–∫–∏", callback_data=f'sugar_3_{drink_id}')
#         ],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def ask_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –ø–µ—á–µ–Ω—å–∫–∏"""
#     query = update.callback_query
#     await query.answer()
    
#     data = query.data.split('_')
    
#     # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —Å–∞—Ö–∞—Ä–∞
#     if data[0] == 'sugar' and data[1] in ['1', '2', '3']:
#         sugar_amount = data[1]
#         drink_id = data[2]
#         user_id = query.from_user.id
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–µ–∫
#         current_orders[user_id]['sugar_amount'] = int(sugar_amount)
#         message_start = f"{CATS['sparkles']} {sugar_amount} –ª–æ–∂–µ—á–∫–∞(–∏) —Å–∞—Ö–∞—Ä–∞ - –∑–∞–ø–∏—Å–∞–ª–∞!\n\n"
#     elif data[0] == 'sugar' and data[1] == 'no':
#         # –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞
#         drink_id = data[2]
#         user_id = query.from_user.id
#         current_orders[user_id]['sugar'] = False
#         current_orders[user_id]['sugar_amount'] = 0
#         message_start = f"{CATS['sparkles']} –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞ - –∑–∞–ø–∏—Å–∞–ª–∞!\n\n"
#     else:
#         # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π
#         message_start = ""
#         drink_id = data[2] if len(data) > 2 else None
    
#     message = (
#         f"{message_start}"
#         f"üç™ –ê –ø–µ—á–µ–Ω—å–∫–∏ –±—É–¥–µ—à—å?"
#     )
    
#     keyboard = [
#         [
#             InlineKeyboardButton("‚úÖ –î–∞, —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏", callback_data=f'cookies_yes_{drink_id}'),
#             InlineKeyboardButton("‚ùå –ù–µ—Ç, –±–µ–∑ –ø–µ—á–µ–Ω–µ–∫", callback_data=f'cookies_no_{drink_id}')
#         ],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
#     query = update.callback_query
#     await query.answer()
    
#     data = query.data.split('_')
#     cookies_choice = data[1]
#     drink_id = data[2]
#     user_id = query.from_user.id
#     user = query.from_user
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—á–µ–Ω–µ–∫
#     current_orders[user_id]['cookies'] = (cookies_choice == 'yes')
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
#     order = current_orders[user_id]
#     drink_name = MENU[order['drink']]
    
#     order_details = [drink_name]
#     if order.get('sugar'):
#         sugar_amount = order.get('sugar_amount', 1)
#         if sugar_amount == 1:
#             order_details.append("—Å 1 –ª–æ–∂–µ—á–∫–æ–π —Å–∞—Ö–∞—Ä–∞")
#         else:
#             order_details.append(f"—Å {sugar_amount} –ª–æ–∂–µ—á–∫–∞–º–∏ —Å–∞—Ö–∞—Ä–∞")
#     else:
#         order_details.append("–±–µ–∑ —Å–∞—Ö–∞—Ä–∞")
    
#     if order['cookies']:
#         order_details.append("—Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏ üç™")
#     else:
#         order_details.append("–±–µ–∑ –ø–µ—á–µ–Ω–µ–∫")
    
#     order_description = ", ".join(order_details)
    
#     # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_message = (
#         f"{CATS['love']} –£—Ä–∞! –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
#         f"–¢—ã –∑–∞–∫–∞–∑–∞–ª–∞: {order_description}\n\n"
#         f"{CATS['sparkles']} –ù–∞—á–∏–Ω–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å —Å –ª—é–±–æ–≤—å—é! {CATS['happy']}\n\n"
#         f"*–ö–æ—Ç–∏–∫ –Ω–∞–¥–µ–≤–∞–µ—Ç —Ñ–∞—Ä—Ç—É–∫ –∏ –±–µ—Ä—ë—Ç —á–∞—à–µ—á–∫—É –ª–∞–ø–∫–∞–º–∏*"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['heart']} –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", callback_data=f'receive_order_{user_id}')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É —Å –≥–æ—Ç–æ–≤–∫–æ–π
#     await query.message.delete()
#     await context.bot.send_photo(
#         chat_id=query.message.chat_id,
#         photo="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExeTdxZTUyd3V1aXVqcGNiajd5cmJuNTdkcWdzcnBuajZ0aHp1M2d6NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/MDJ9IbxxvDUQM/giphy.gif",
#         caption=user_message,
#         reply_markup=reply_markup
#     )
    
#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
#     admin_message = (
#         f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
#         f"–û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
#         f"–ó–∞–∫–∞–∑: {order_description}\n"
#     )
    
#     try:
#         await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
#     except Exception as e:
#         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

# async def receive_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫"""
#     query = update.callback_query
#     await query.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üíï")
    
#     user_id = int(query.data.split('_')[2])
#     order = current_orders.get(user_id, {})
    
#     success_message = (
#         f"{CATS['love']} –í–∂—É—Ö! –ì–æ—Ç–æ–≤–æ!\n\n"
#         f"*–ö–æ—Ç–∏–∫-–±–∞—Ä–∏—Å—Ç–∞ –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—Ç —á–∞—à–µ—á–∫—É –ª–∞–ø–∫–∞–º–∏*\n\n"
#         f"{CATS['sparkles']} –í–æ—Ç —Ç–≤–æ–π –Ω–∞–ø–∏—Ç–æ–∫, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å –ª—é–±–æ–≤—å—é!\n"
#         f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞, —Å–æ–ª–Ω—ã—à–∫–æ! {CATS['yum']}\n\n"
#         f"*–ö–æ—Ç–∏–∫ –º—É—Ä—á–∏—Ç –∏ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º*"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['sparkles']} –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_review')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º
#     await query.message.delete()
#     await context.bot.send_photo(
#         chat_id=query.message.chat_id,
#         photo="https://i.pinimg.com/736x/17/2a/9b/172a9b55bf3e9f5c898cf7c4bbf640d5.jpg",
#         caption=success_message,
#         reply_markup=reply_markup
#     )
    
#     # –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑
#     if user_id in current_orders:
#         del current_orders[user_id]

# async def give_compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–î–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"""
#     query = update.callback_query
#     await query.answer("üíï")
    
#     compliment = random.choice(COMPLIMENTS)
#     user = query.from_user
    
#     message = (
#         f"{CATS['love']} {user.first_name}, {compliment}\n\n"
#         f"*–ö–æ—Ç–∏–∫ –º—É—Ä—á–∏—Ç –∏ —Ç—Ä—ë—Ç—Å—è –æ –Ω–æ–∂–∫–∏* {CATS['happy']}"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", callback_data='compliment')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def show_cat_pic(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞"""
#     query = update.callback_query
#     await query.answer("–ú—è—É! üê±")
    
#     captions = [
#         f"{CATS['love']} –ö–æ—Ç–∏–∫ –¥–Ω—è –¥–ª—è —Ç–µ–±—è!",
#         f"{CATS['happy']} –°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –º–∏–ª–∞—à!",
#         f"{CATS['heart']} –≠—Ç–æ—Ç –∫–æ—Ç–∏–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!",
#         f"{CATS['sparkles']} –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!",
#     ]
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['paw']} –ï—â—ë –∫–æ—Ç–∏–∫–∞!", callback_data='cat_pic')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
#     await query.message.delete()
#     await context.bot.send_photo(
#         chat_id=query.message.chat_id,
#         photo=random.choice(CAT_PICS),
#         caption=random.choice(captions),
#         reply_markup=reply_markup
#     )

# async def show_cat_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö"""
#     query = update.callback_query
#     await query.answer()
    
#     fact = random.choice(CAT_FACTS)
    
#     message = (
#         f"{CATS['sparkles']} –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö:\n\n"
#         f"{fact}\n\n"
#         f"{CATS['paw']} –ü—Ä–∞–≤–¥–∞ –∂–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ?"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['sparkles']} –ï—â—ë —Ñ–∞–∫—Ç", callback_data='cat_fact')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def pet_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞"""
#     query = update.callback_query
#     await query.answer("–ú—É—Ä-–º—É—Ä-–º—É—Ä! üò∏")
    
#     messages = [
#         f"{CATS['love']} *–º—É—Ä—á–∏—Ç –≥—Ä–æ–º–∫–æ –∏ –¥–æ–≤–æ–ª—å–Ω–æ*\n–¢—ã –ª—É—á—à–∞—è —Ö–æ–∑—è–π–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ!",
#         f"{CATS['happy']} *–ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∂–∏–≤–æ—Ç–∏–∫*\n–ü–æ—á–µ—à–∏ –ø—É–∑–∏–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
#         f"{CATS['yum']} *—Ç—Ä—ë—Ç—Å—è –æ —Ä—É–∫—É*\n–û–±–æ–∂–∞—é —Ç–≤–æ–∏ –ª–∞—Å–∫–∏!",
#         f"{CATS['angel']} *—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫–ª—É–±–æ—á–∫–æ–º*\n–î–∞–≤–∞–π –æ–±–Ω–∏–º–∞—Ç—å—Å—è!",
#         f"{CATS['sparkles']} *–¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∞–∂ –ª–∞–ø–∫–∞–º–∏*\n–≠—Ç–æ —Ç–µ–±–µ –∑–∞ –ª–∞—Å–∫—É!",
#         f"{CATS['heart']} *–æ–±–ª–∏–∑—ã–≤–∞–µ—Ç –ø–∞–ª—å—á–∏–∫*\n–¢—ã –ø–∞—Ö–Ω–µ—à—å —Å—á–∞—Å—Ç—å–µ–º!",
#     ]
    
#     message = random.choice(messages)
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –ø–æ–≥–ª–∞–¥–∏—Ç—å", callback_data='pet_cat')],
#         [InlineKeyboardButton(f"{CATS['kiss']} –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='kiss_cat')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def kiss_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞"""
#     query = update.callback_query
#     await query.answer("üòòüíï")
    
#     messages = [
#         f"{CATS['love']} *–∫—Ä–∞—Å–Ω–µ–µ—Ç –ø–æ–¥ —à—ë—Ä—Å—Ç–∫–æ–π*\n–û–π, –∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ!",
#         f"{CATS['kiss']} *—Ü–µ–ª—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç*\n–ú—É—Ä-–º—É—Ä, –ª—é–±–ª—é —Ç–µ–±—è!",
#         f"{CATS['angel']} *–ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É –≤ –ª–∞–ø–∫–∏*\n–¢—ã —Å–∞–º–∞—è –º–∏–ª–∞—è!",
#         f"{CATS['heart']} *–≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º*\n–ï—â—ë, –µ—â—ë, –µ—â—ë!",
#     ]
    
#     message = f"{random.choice(messages)}\n\n‚ú® –ö–æ—Ç–∏–∫ —Å—á–∞—Å—Ç–ª–∏–≤!"
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['love']} –û–±–Ω—è—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='hug_cat')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def hug_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±–Ω—è—Ç—å –∫–æ—Ç–∏–∫–∞"""
#     query = update.callback_query
#     await query.answer("ü§óüíï")
    
#     messages = [
#         f"{CATS['hug']} *–æ–±–Ω–∏–º–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*\n–¢—ë–ø–ª—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ - –ª—É—á—à–µ–µ –≤ –º–∏—Ä–µ!",
#         f"{CATS['love']} *–ø—Ä–∏–∂–∏–º–∞–µ—Ç—Å—è –≤—Å–µ–º —Ç–µ–ª—å—Ü–µ–º*\n–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–π!",
#         f"{CATS['happy']} *–º—É—Ä—á–∏—Ç –∫–∞–∫ –º–æ—Ç–æ—Ä—á–∏–∫*\n–¢–≤–æ–∏ –æ–±—ä—è—Ç–∏—è –≤–æ–ª—à–µ–±–Ω—ã–µ!",
#         f"{CATS['heart']} *–∑–∞—Å—ã–ø–∞–µ—Ç –≤ –æ–±—ä—è—Ç–∏—è—Ö*\n–¢–∞–∫ —É—é—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ...",
#     ]
    
#     message = f"{random.choice(messages)}\n\n‚ú® –ö–æ—Ç–∏–∫ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!"
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –æ–±–Ω—è—Ç—å—Å—è", callback_data='hug_cat')],
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
#     query = update.callback_query
#     await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíï")
    
#     reviews = [
#         "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –õ—É—á—à–∏–π –∫–æ—Ç–æ–∫–æ—Ñ–µ –≤ –º–∏—Ä–µ!",
#         "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ö–æ—Ç–∏–∫-–±–∞—Ä–∏—Å—Ç–∞ - –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!",
#         "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û–±–Ω–∏–º–∞—à–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑!",
#         "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ú—É—Ä—á–∞–Ω–∏–µ –ª–µ—á–∏—Ç –¥—É—à—É!",
#     ]
    
#     message = (
#         f"{CATS['love']} –¢–≤–æ–π –æ—Ç–∑—ã–≤:\n\n"
#         f"{random.choice(reviews)}\n\n"
#         f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! {CATS['heart']}"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
#     ]
    
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_caption(
#         caption=message,
#         reply_markup=reply_markup
#     )

# async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫"""
#     query = update.callback_query
    
#     handlers = {
#         'main_menu': start,
#         'drinks_menu': show_drinks_menu,
#         'compliment': give_compliment,
#         'pet_cat': pet_cat,
#         'kiss_cat': kiss_cat,
#         'hug_cat': hug_cat,
#         'cat_pic': show_cat_pic,
#         'cat_fact': show_cat_fact,
#         'leave_review': leave_review,
#     }
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#     if query.data in handlers:
#         await handlers[query.data](update, context)
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#     elif query.data.startswith('drink_'):
#         await customize_drink(update, context)
#     elif query.data.startswith('sugar_yes_'):
#         await ask_sugar_amount(update, context)
#     elif query.data.startswith('sugar_no_'):
#         await ask_cookies(update, context)
#     elif query.data.startswith('sugar_') and query.data.split('_')[1] in ['1', '2', '3']:
#         await ask_cookies(update, context)
#     elif query.data.startswith('cookies_'):
#         await process_order(update, context)
#     elif query.data.startswith('receive_order_'):
#         await receive_order(update, context)

# def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
#     TOKEN = '7568374565:AAHl9zcfkai7Y7RBSL44ZNpD3TL24ZnZ8Fg'
    
#     # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
#     application = Application.builder().token(TOKEN).build()
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(CallbackQueryHandler(callback_handler))
    
#     # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ—Ç–∏–∫–æ–≤
#     setup_daily_cat_job(application)
    
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
#     print(f"{CATS['welcome']} –ú–∏–ª–µ–π—à–∏–π –∫–æ—Ç–æ–∫–æ—Ñ–µ–π–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú—è—É!")
#     print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 9:00")
#     application.run_polling(allowed_updates=Update.ALL_TYPES)

# if __name__ == '__main__':
#     main()


import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio
import random
from datetime import datetime, time
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–≤–æ–π ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
ADMIN_ID = '677822370'  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
CATS = {
    'welcome': 'üê±',
    'happy': 'üò∫',
    'love': 'üòª',
    'yum': 'üò∏',
    'hug': 'ü§ó',
    'kiss': 'üòò',
    'paw': 'üêæ',
    'sleepy': 'üò¥',
    'angel': 'üòá',
    'heart': 'üíï',
    'sparkles': '‚ú®',
    'flower': 'üå∏',
}

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∏–∫–æ–≤ (URL) - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
CAT_PICS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    "https://i.pinimg.com/736x/17/2a/9b/172a9b55bf3e9f5c898cf7c4bbf640d5.jpg",
    "https://i.pinimg.com/736x/10/bc/bd/10bcbdc51fdacda178fbf70267e19251.jpg",
    "https://i.pinimg.com/736x/8c/4f/f4/8c4ff4d8cdfe75284c142e3d692637a7.jpg",
    "https://i.pinimg.com/736x/60/8c/73/608c734c72422e72f68cd5d06be1b400.jpg",
    "https://i.pinimg.com/736x/d6/f2/38/d6f238dcf1e585ef7bc421a18cc7538f.jpg",
    "https://i.pinimg.com/736x/85/61/98/8561985bacec7121a94c572257b4b6ca.jpg",
    "https://i.pinimg.com/736x/f8/37/13/f83713f01951d89720c5665c4a607ef4.jpg",
    "https://i.pinimg.com/736x/73/fa/76/73fa76b27c9934abcefa64fec4d31200.jpg",
    "https://i.pinimg.com/736x/28/8a/f4/288af49966e71c911210cbe91107695d.jpg"
]

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Ç–∏–∫–∏ - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
DAILY_CATS = {
    0: {  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        'pic': 'https://i.pinimg.com/736x/b1/d3/32/b1d3325adb7bc99ccf093b2a54386d29.jpg',
        'message': f'{CATS["love"]} –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –° –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª—å–∫–æ–π! –ü—É—Å—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º –∏ —É—é—Ç–Ω—ã–º, –∫–∞–∫ –º—É—Ä—á–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞! {CATS["sparkles"]}'
    },
    1: {  # –í—Ç–æ—Ä–Ω–∏–∫
        'pic': 'https://i.pinimg.com/736x/b2/62/dc/b262dcd0d73f3ae36fbb9d7fd42f4279.jpg',
        'message': f'{CATS["happy"]} –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞, –º–∏–ª–∞—è! –ö–æ—Ç–∏–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–±–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–±–Ω–∏–º–∞—à–∫–∏ –∏ –∂–µ–ª–∞–µ—Ç —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! {CATS["hug"]}'
    },
    2: {  # –°—Ä–µ–¥–∞
        'pic': 'https://i.pinimg.com/736x/ea/ab/45/eaab4559698723097225953ce496f665.jpg',
        'message': f'{CATS["yum"]} –°–µ—Ä–µ–¥–∏–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏! –ö–æ—Ç–∏–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ç–µ–±–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—Ñ–µ —Å –ª—é–±–æ–≤—å—é. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å–æ –≤—Å–µ–º! {CATS["kiss"]}'
    },
    3: {  # –ß–µ—Ç–≤–µ—Ä–≥
        'pic': 'https://i.pinimg.com/736x/39/83/9b/39839b8fe7218ada38d43cdd802a4cda.jpg',
        'message': f'{CATS["angel"]} –°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ —á–µ—Ç–≤–µ—Ä–≥–∞! –ö–æ—Ç–∏–∫ –º—É—Ä–ª—ã—á–µ—Ç –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è! {CATS["heart"]}'
    },
    4: {  # –ü—è—Ç–Ω–∏—Ü–∞
        'pic': 'https://i.pinimg.com/736x/0f/94/90/0f9490bd5c125b6f2236598002d2df4f.jpg',
        'message': f'{CATS["sparkles"]} –£—Ä–∞, –ø—è—Ç–Ω–∏—Ü–∞! –ö–æ—Ç–∏–∫ —Ç–∞–Ω—Ü—É–µ—Ç –æ—Ç —Ä–∞–¥–æ—Å—Ç–∏ –∏ –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ —á—É–¥–µ—Å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏! {CATS["flower"]}'
    },
    5: {  # –°—É–±–±–æ—Ç–∞
        'pic': 'https://i.pinimg.com/736x/69/ad/a6/69ada6196ac6d669180a412455198fdf.jpg',
        'message': f'{CATS["sleepy"]} –°—É–±–±–æ—Ç–Ω–µ–µ —É—Ç—Ä–æ! –ö–æ—Ç–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –≤ —É—é—Ç–µ –∏ —Ä–∞–¥–æ—Å—Ç–∏. –¢—ã –∑–∞—Å–ª—É–∂–∏–ª–∞ –æ—Ç–¥—ã—Ö! {CATS["love"]}'
    },
    6: {  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        'pic': 'https://i.pinimg.com/736x/17/2a/9b/172a9b55bf3e9f5c898cf7c4bbf640d5.jpg',
        'message': f'{CATS["hug"]} –ù–µ–∂–Ω–æ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è! –ö–æ—Ç–∏–∫ —à–ª—ë—Ç —Ç–µ–±–µ –ª—É—á–∏–∫–∏ –ª—é–±–≤–∏ –∏ —Ç—ë–ø–ª—ã–µ –æ–±—ä—è—Ç–∏—è! {CATS["paw"]}'
    }
}

# –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–≤—É—à–∫–∏
COMPLIMENTS = [
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞! üíï",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –æ—Å–≤–µ—â–∞–µ—Ç –≤–µ—Å—å –º–∏—Ä! ‚ú®",
    "–¢—ã —Å–∞–º–∞—è –º–∏–ª–∞—è –Ω–∞ —Å–≤–µ—Ç–µ! üå∏",
    "–ö–æ—Ç–∏–∫–∏ –º—É—Ä—á–∞—Ç –æ—Ç —Ç–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç—ã! üòª",
    "–¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ - —è—Ä–∫–∞—è –∏ —Ç—ë–ø–ª–∞—è! ‚òÄÔ∏è",
    "–í—Å–µ –∫–æ—Ç–∏–∫–∏ –º–∏—Ä–∞ —Ö–æ—Ç—è—Ç —Å —Ç–æ–±–æ–π –¥—Ä—É–∂–∏—Ç—å! üê±",
    "–¢—ã –∏–∑–ª—É—á–∞–µ—à—å –¥–æ–±—Ä–æ—Ç—É –∏ –ø–æ–∑–∏—Ç–∏–≤! üåà",
    "–¢–≤–æ–∏ –≥–ª–∞–∑–∫–∏ —Å–∏—è—é—Ç –∫–∞–∫ –∑–≤—ë–∑–¥–æ—á–∫–∏! ‚≠ê",
]

# –ú–∏–ª—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∏–∫–∞—Ö
CAT_FACTS = [
    "–ö–æ—Ç–∏–∫–∏ —Ç—Ä–∞—Ç—è—Ç 70% –∂–∏–∑–Ω–∏ –Ω–∞ —Å–æ–Ω. –ú–µ—á—Ç–∞! üò¥",
    "–ö–æ–≥–¥–∞ –∫–æ—Ç–∏–∫ —Ç—Ä—ë—Ç—Å—è –æ —Ç–µ–±—è - –æ–Ω –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ–±—è –∫–∞–∫ —Å–≤–æ—é —Å–µ–º—å—é! üíï",
    "–ö–æ—Ç–∏–∫–∏ –º—É—Ä—á–∞—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∂–∏–≤–ª–µ–Ω–∏—é –∫–æ—Å—Ç–µ–π! ü¶¥",
    "–£ –∫–æ—Ç–∏–∫–æ–≤ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ª—é–¥—å–º–∏! üó£Ô∏è",
    "–ö–æ—Ç–∏–∫ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ç–µ–±–µ '–¥–æ–±—ã—á—É' –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—Å—è, —á—Ç–æ —Ç—ã –Ω–µ —É–º–µ–µ—à—å –æ—Ö–æ—Ç–∏—Ç—å—Å—è! üê≠",
    "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –º–æ—Ä–≥–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ - —ç—Ç–æ –ø–æ—Ü–µ–ª—É–π! üòò",
    "–ö–æ—Ç–∏–∫–∏ –≤–∏–¥—è—Ç –≤ 6 —Ä–∞–∑ –ª—É—á—à–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ç–µ–º–Ω–æ—Ç–µ! üëÄ",
    "–£ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–æ—Å–∞, –∫–∞–∫ —É –ª—é–¥–µ–π –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤! üëÉ",
]

# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤
MENU = {
    'tea': '–ß–∞–π',
    'tea_milk': '–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º',
    'coffee': '–ö–æ—Ñ–µ'
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤
current_orders = {}

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = 'users.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)

# –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: chat_id}
registered_users = load_users()

async def send_daily_cat(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –≤ 9:00"""
    current_day = datetime.now().weekday()
    daily_cat = DAILY_CATS[current_day]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id, chat_id in registered_users.items():
        try:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=daily_cat['pic'],
                caption=daily_cat['message']
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def setup_daily_cat_job(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ç–∏–∫–∞ –≤ 9:00"""
    job_queue = application.job_queue
    
    # –ó–∞–¥–∞—ë–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - 9:00
    send_time = time(hour=9, minute=0, second=0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_queue.run_daily(
        send_daily_cat,
        time=send_time,
        name='daily_cat'
    )
    
    logger.info("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –≤ 9:00")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –≤—ã–∑–æ–≤
    if update.message:
        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
        user = update.effective_user
        chat_id = update.effective_chat.id
    else:
        # –í—ã–∑–æ–≤ –∏–∑ callback (–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
        query = update.callback_query
        user = query.from_user
        chat_id = query.message.chat_id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if str(user.id) not in registered_users:
        registered_users[str(user.id)] = chat_id
        save_users(registered_users)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.id}")
    
    welcome_message = (
        f"{CATS['welcome']} –ú—è—É-–º—è—É, {user.first_name}! {CATS['love']}\n\n"
        f"–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ—Ç–æ–∫–æ—Ñ–µ–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! {CATS['happy']}\n\n"
        f"–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è:\n"
        f"‚òï –í–æ–ª—à–µ–±–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
        f"üê± –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏\n"
        f"üíï –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ –æ–±–Ω–∏–º–∞—à–∫–∏\n\n"
        f"–ß—Ç–æ –∂–µ–ª–∞–µ—à—å, —Å–æ–ª–Ω—ã—à–∫–æ? {CATS['sparkles']}\n\n"
        f"P.S. –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–æ—Ç–∏–∫–∞ –¥–Ω—è! üåÖ"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"‚òï –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", callback_data='drinks_menu')],
        [InlineKeyboardButton(f"{CATS['love']} –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", callback_data='compliment')],
        [InlineKeyboardButton(f"{CATS['paw']} –ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='pet_cat')],
        [InlineKeyboardButton(f"üì∏ –ö–æ—Ç–∏–∫ –¥–Ω—è", callback_data='cat_pic')],
        [InlineKeyboardButton(f"üìö –§–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö", callback_data='cat_fact')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∫–æ—Ç–∏–∫–∞
        await update.message.reply_photo(
            photo=random.choice(CAT_PICS),
            caption=welcome_message,
            reply_markup=reply_markup
        )
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_caption(
            caption=welcome_message,
            reply_markup=reply_markup
        )

async def show_drinks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    message = f"{CATS['yum']} –ß—Ç–æ –±—É–¥–µ–º –ø–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?\n\n"
    
    keyboard = []
    for drink_id, drink_name in MENU.items():
        message += f"‚Ä¢ {drink_name}\n"
        keyboard.append([InlineKeyboardButton(
            f"{CATS['yum']} {drink_name}", 
            callback_data=f'drink_{drink_id}'
        )])
    
    keyboard.append([InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message + f"\n{CATS['paw']} –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
        reply_markup=reply_markup
    )

async def customize_drink(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–∏—Ç–∫–∞ - —Å–∞—Ö–∞—Ä –∏ –ø–µ—á–µ–Ω—å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    drink_id = query.data.split('_')[1]
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø–∏—Ç–∫–∞
    if user_id not in current_orders:
        current_orders[user_id] = {}
    current_orders[user_id]['drink'] = drink_id
    
    message = (
        f"{CATS['sparkles']} –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä - {MENU[drink_id]}!\n\n"
        f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª–∏:\n\n"
        f"üç¨ –î–æ–±–∞–≤–∏—Ç—å —Å–∞—Ö–∞—Ä?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å —Å–∞—Ö–∞—Ä–æ–º", callback_data=f'sugar_yes_{drink_id}'),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", callback_data=f'sugar_no_{drink_id}')
        ],
        [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def ask_sugar_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–µ–∫ —Å–∞—Ö–∞—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    drink_id = data[2]
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ —Å–∞—Ö–∞—Ä –Ω—É–∂–µ–Ω
    current_orders[user_id]['sugar'] = True
    
    message = (
        f"{CATS['sparkles']} –° —Å–∞—Ö–∞—Ä–æ–º, –æ—Ç–ª–∏—á–Ω–æ!\n\n"
        f"ü•Ñ –°–∫–æ–ª—å–∫–æ –ª–æ–∂–µ—á–µ–∫ –ø–æ–ª–æ–∂–∏—Ç—å?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("1 –ª–æ–∂–µ—á–∫–∞", callback_data=f'sugar_1_{drink_id}'),
            InlineKeyboardButton("2 –ª–æ–∂–µ—á–∫–∏", callback_data=f'sugar_2_{drink_id}'),
            InlineKeyboardButton("3 –ª–æ–∂–µ—á–∫–∏", callback_data=f'sugar_3_{drink_id}')
        ],
        [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def ask_cookies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –ø–µ—á–µ–Ω—å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —Å–∞—Ö–∞—Ä–∞
    if data[0] == 'sugar' and data[1] in ['1', '2', '3']:
        sugar_amount = data[1]
        drink_id = data[2]
        user_id = query.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–µ–∫
        current_orders[user_id]['sugar_amount'] = int(sugar_amount)
        message_start = f"{CATS['sparkles']} {sugar_amount} –ª–æ–∂–µ—á–∫–∞(–∏) —Å–∞—Ö–∞—Ä–∞ - –∑–∞–ø–∏—Å–∞–ª–∞!\n\n"
    elif data[0] == 'sugar' and data[1] == 'no':
        # –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞
        drink_id = data[2]
        user_id = query.from_user.id
        current_orders[user_id]['sugar'] = False
        current_orders[user_id]['sugar_amount'] = 0
        message_start = f"{CATS['sparkles']} –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞ - –∑–∞–ø–∏—Å–∞–ª–∞!\n\n"
    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–ª—É—á–∞–π
        message_start = ""
        drink_id = data[2] if len(data) > 2 else None
    
    message = (
        f"{message_start}"
        f"üç™ –ê –ø–µ—á–µ–Ω—å–∫–∏ –±—É–¥–µ—à—å?"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏", callback_data=f'cookies_yes_{drink_id}'),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –±–µ–∑ –ø–µ—á–µ–Ω–µ–∫", callback_data=f'cookies_no_{drink_id}')
        ],
        [InlineKeyboardButton(f"{CATS['welcome']} –ù–∞–∑–∞–¥", callback_data='drinks_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    cookies_choice = data[1]
    drink_id = data[2]
    user_id = query.from_user.id
    user = query.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—á–µ–Ω–µ–∫
    current_orders[user_id]['cookies'] = (cookies_choice == 'yes')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = current_orders[user_id]
    drink_name = MENU[order['drink']]
    
    order_details = [drink_name]
    if order.get('sugar'):
        sugar_amount = order.get('sugar_amount', 1)
        if sugar_amount == 1:
            order_details.append("—Å 1 –ª–æ–∂–µ—á–∫–æ–π —Å–∞—Ö–∞—Ä–∞")
        else:
            order_details.append(f"—Å {sugar_amount} –ª–æ–∂–µ—á–∫–∞–º–∏ —Å–∞—Ö–∞—Ä–∞")
    else:
        order_details.append("–±–µ–∑ —Å–∞—Ö–∞—Ä–∞")
    
    if order['cookies']:
        order_details.append("—Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏ üç™")
    else:
        order_details.append("–±–µ–∑ –ø–µ—á–µ–Ω–µ–∫")
    
    order_description = ", ".join(order_details)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = (
        f"{CATS['love']} –£—Ä–∞! –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"–¢—ã –∑–∞–∫–∞–∑–∞–ª–∞: {order_description}\n\n"
        f"{CATS['sparkles']} –ù–∞—á–∏–Ω–∞—é –≥–æ—Ç–æ–≤–∏—Ç—å —Å –ª—é–±–æ–≤—å—é! {CATS['happy']}\n\n"
        f"*–ö–æ—Ç–∏–∫ –Ω–∞–¥–µ–≤–∞–µ—Ç —Ñ–∞—Ä—Ç—É–∫ –∏ –±–µ—Ä—ë—Ç —á–∞—à–µ—á–∫—É –ª–∞–ø–∫–∞–º–∏*"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['heart']} –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", callback_data=f'receive_order_{user_id}')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É —Å –≥–æ—Ç–æ–≤–∫–æ–π
    await query.message.delete()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExeTdxZTUyd3V1aXVqcGNiajd5cmJuNTdkcWdzcnBuajZ0aHp1M2d6NCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/MDJ9IbxxvDUQM/giphy.gif",
        caption=user_message,
        reply_markup=reply_markup
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"–û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
        f"–ó–∞–∫–∞–∑: {order_description}\n"
    )
    
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def receive_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –Ω–∞–ø–∏—Ç–æ–∫"""
    query = update.callback_query
    await query.answer("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üíï")
    
    user_id = int(query.data.split('_')[2])
    order = current_orders.get(user_id, {})
    
    success_message = (
        f"{CATS['love']} –í–∂—É—Ö! –ì–æ—Ç–æ–≤–æ!\n\n"
        f"*–ö–æ—Ç–∏–∫-–±–∞—Ä–∏—Å—Ç–∞ –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—Ç —á–∞—à–µ—á–∫—É –ª–∞–ø–∫–∞–º–∏*\n\n"
        f"{CATS['sparkles']} –í–æ—Ç —Ç–≤–æ–π –Ω–∞–ø–∏—Ç–æ–∫, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å –ª—é–±–æ–≤—å—é!\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞, —Å–æ–ª–Ω—ã—à–∫–æ! {CATS['yum']}\n\n"
        f"*–ö–æ—Ç–∏–∫ –º—É—Ä—á–∏—Ç –∏ –≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º*"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['sparkles']} –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_review')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º –Ω–∞–ø–∏—Ç–∫–æ–º –∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await query.message.delete()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=random.choice(CAT_PICS),  # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        caption=success_message,
        reply_markup=reply_markup
    )
    
    # –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑
    if user_id in current_orders:
        del current_orders[user_id]

async def give_compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"""
    query = update.callback_query
    await query.answer("üíï")
    
    compliment = random.choice(COMPLIMENTS)
    user = query.from_user
    
    message = (
        f"{CATS['love']} {user.first_name}, {compliment}\n\n"
        f"*–ö–æ—Ç–∏–∫ –º—É—Ä—á–∏—Ç –∏ —Ç—Ä—ë—Ç—Å—è –æ –Ω–æ–∂–∫–∏* {CATS['happy']}"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", callback_data='compliment')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def show_cat_pic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer("–ú—è—É! üê±")
    
    captions = [
        f"{CATS['love']} –ö–æ—Ç–∏–∫ –¥–Ω—è –¥–ª—è —Ç–µ–±—è!",
        f"{CATS['happy']} –°–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–π –º–∏–ª–∞—à!",
        f"{CATS['heart']} –≠—Ç–æ—Ç –∫–æ—Ç–∏–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!",
        f"{CATS['sparkles']} –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!",
    ]
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['paw']} –ï—â—ë –∫–æ—Ç–∏–∫–∞!", callback_data='cat_pic')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –Ω–æ–≤–æ–π —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    await query.message.delete()
    await context.bot.send_photo(
        chat_id=query.message.chat_id,
        photo=random.choice(CAT_PICS),  # –†–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        caption=random.choice(captions),
        reply_markup=reply_markup
    )

async def show_cat_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    fact = random.choice(CAT_FACTS)
    
    message = (
        f"{CATS['sparkles']} –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∏–∫–∞—Ö:\n\n"
        f"{fact}\n\n"
        f"{CATS['paw']} –ü—Ä–∞–≤–¥–∞ –∂–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ?"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['sparkles']} –ï—â—ë —Ñ–∞–∫—Ç", callback_data='cat_fact')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def pet_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer("–ú—É—Ä-–º—É—Ä-–º—É—Ä! üò∏")
    
    messages = [
        f"{CATS['love']} *–º—É—Ä—á–∏—Ç –≥—Ä–æ–º–∫–æ –∏ –¥–æ–≤–æ–ª—å–Ω–æ*\n–¢—ã –ª—É—á—à–∞—è —Ö–æ–∑—è–π–∫–∞ –Ω–∞ —Å–≤–µ—Ç–µ!",
        f"{CATS['happy']} *–ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∂–∏–≤–æ—Ç–∏–∫*\n–ü–æ—á–µ—à–∏ –ø—É–∑–∏–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!",
        f"{CATS['yum']} *—Ç—Ä—ë—Ç—Å—è –æ —Ä—É–∫—É*\n–û–±–æ–∂–∞—é —Ç–≤–æ–∏ –ª–∞—Å–∫–∏!",
        f"{CATS['angel']} *—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫–ª—É–±–æ—á–∫–æ–º*\n–î–∞–≤–∞–π –æ–±–Ω–∏–º–∞—Ç—å—Å—è!",
        f"{CATS['sparkles']} *–¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∞–∂ –ª–∞–ø–∫–∞–º–∏*\n–≠—Ç–æ —Ç–µ–±–µ –∑–∞ –ª–∞—Å–∫—É!",
        f"{CATS['heart']} *–æ–±–ª–∏–∑—ã–≤–∞–µ—Ç –ø–∞–ª—å—á–∏–∫*\n–¢—ã –ø–∞—Ö–Ω–µ—à—å —Å—á–∞—Å—Ç—å–µ–º!",
    ]
    
    message = random.choice(messages)
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –ø–æ–≥–ª–∞–¥–∏—Ç—å", callback_data='pet_cat')],
        [InlineKeyboardButton(f"{CATS['kiss']} –ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='kiss_cat')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def kiss_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer("üòòüíï")
    
    messages = [
        f"{CATS['love']} *–∫—Ä–∞—Å–Ω–µ–µ—Ç –ø–æ–¥ —à—ë—Ä—Å—Ç–∫–æ–π*\n–û–π, –∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ!",
        f"{CATS['kiss']} *—Ü–µ–ª—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç*\n–ú—É—Ä-–º—É—Ä, –ª—é–±–ª—é —Ç–µ–±—è!",
        f"{CATS['angel']} *–ø—Ä—è—á–µ—Ç –º–æ—Ä–¥–æ—á–∫—É –≤ –ª–∞–ø–∫–∏*\n–¢—ã —Å–∞–º–∞—è –º–∏–ª–∞—è!",
        f"{CATS['heart']} *–≤–∏–ª—è–µ—Ç —Ö–≤–æ—Å—Ç–∏–∫–æ–º*\n–ï—â—ë, –µ—â—ë, –µ—â—ë!",
    ]
    
    message = f"{random.choice(messages)}\n\n‚ú® –ö–æ—Ç–∏–∫ —Å—á–∞—Å—Ç–ª–∏–≤!"
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['love']} –û–±–Ω—è—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data='hug_cat')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def hug_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω—è—Ç—å –∫–æ—Ç–∏–∫–∞"""
    query = update.callback_query
    await query.answer("ü§óüíï")
    
    messages = [
        f"{CATS['hug']} *–æ–±–Ω–∏–º–∞–µ—Ç –ª–∞–ø–∫–∞–º–∏*\n–¢—ë–ø–ª—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ - –ª—É—á—à–µ–µ –≤ –º–∏—Ä–µ!",
        f"{CATS['love']} *–ø—Ä–∏–∂–∏–º–∞–µ—Ç—Å—è –≤—Å–µ–º —Ç–µ–ª—å—Ü–µ–º*\n–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—É—Å–∫–∞–π!",
        f"{CATS['happy']} *–º—É—Ä—á–∏—Ç –∫–∞–∫ –º–æ—Ç–æ—Ä—á–∏–∫*\n–¢–≤–æ–∏ –æ–±—ä—è—Ç–∏—è –≤–æ–ª—à–µ–±–Ω—ã–µ!",
        f"{CATS['heart']} *–∑–∞—Å—ã–ø–∞–µ—Ç –≤ –æ–±—ä—è—Ç–∏—è—Ö*\n–¢–∞–∫ —É—é—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ...",
    ]
    
    message = f"{random.choice(messages)}\n\n‚ú® –ö–æ—Ç–∏–∫ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!"
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['love']} –ï—â—ë –æ–±–Ω—è—Ç—å—Å—è", callback_data='hug_cat')],
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def leave_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    query = update.callback_query
    await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíï")
    
    reviews = [
        "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –õ—É—á—à–∏–π –∫–æ—Ç–æ–∫–æ—Ñ–µ –≤ –º–∏—Ä–µ!",
        "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ö–æ—Ç–∏–∫-–±–∞—Ä–∏—Å—Ç–∞ - –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!",
        "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û–±–Ω–∏–º–∞—à–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑!",
        "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ú—É—Ä—á–∞–Ω–∏–µ –ª–µ—á–∏—Ç –¥—É—à—É!",
    ]
    
    message = (
        f"{CATS['love']} –¢–≤–æ–π –æ—Ç–∑—ã–≤:\n\n"
        f"{random.choice(reviews)}\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! {CATS['heart']}"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"{CATS['welcome']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=message,
        reply_markup=reply_markup
    )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    
    handlers = {
        'main_menu': start,
        'drinks_menu': show_drinks_menu,
        'compliment': give_compliment,
        'pet_cat': pet_cat,
        'kiss_cat': kiss_cat,
        'hug_cat': hug_cat,
        'cat_pic': show_cat_pic,
        'cat_fact': show_cat_fact,
        'leave_review': leave_review,
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if query.data in handlers:
        await handlers[query.data](update, context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    elif query.data.startswith('drink_'):
        await customize_drink(update, context)
    elif query.data.startswith('sugar_yes_'):
        await ask_sugar_amount(update, context)
    elif query.data.startswith('sugar_no_'):
        await ask_cookies(update, context)
    elif query.data.startswith('sugar_') and query.data.split('_')[1] in ['1', '2', '3']:
        await ask_cookies(update, context)
    elif query.data.startswith('cookies_'):
        await process_order(update, context)
    elif query.data.startswith('receive_order_'):
        await receive_order(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    TOKEN = '7568374565:AAHl9zcfkai7Y7RBSL44ZNpD3TL24ZnZ8Fg'
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ—Ç–∏–∫–æ–≤
    setup_daily_cat_job(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"{CATS['welcome']} –ú–∏–ª–µ–π—à–∏–π –∫–æ—Ç–æ–∫–æ—Ñ–µ–π–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú—è—É!")
    print(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ç–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 9:00")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()