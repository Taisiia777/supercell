# from contextlib import suppress

# from aiogram import Router, types
# from aiogram.fsm.context import FSMContext

# from src.states import BotState
# from src import keyboards as kb
# from customer_api.client import CustomerAPIClient

# router = Router()
# api_client = CustomerAPIClient()


# @router.message(BotState.INPUT_LOGIN_CODE)
# async def receive_login_code_handler(message: types.Message, state: FSMContext):
#     if not (message.text.isdigit() and len(message.text) == 6):
#         await message.answer(
#             "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä", reply_markup=kb.CANCEL_INPUT_LOGIN_CODE_KB
#         )
#         return

#     data = await state.get_data()
#     result = await api_client.save_new_login_code(data.get("line_id"), message.text)
#     code_message_id = data.get("code_message_id")
#     await state.set_state()
#     await state.update_data(line_id=None, code_message_id=None)
#     await message.answer("–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç" if result else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥")

#     with suppress(Exception):
#         await message.bot.delete_message(message.chat.id, code_message_id)
import logging
from contextlib import suppress

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.states import BotState
from src import keyboards as kb
from customer_api.client import CustomerAPIClient
from customer_api.exceptions import CustomerAPIError

router = Router()
api_client = CustomerAPIClient()
logger = logging.getLogger(__name__)


@router.message(BotState.INPUT_LOGIN_CODE)
async def receive_login_code_handler(message: types.Message, state: FSMContext):
    if not (message.text.isdigit() and len(message.text) == 6):
        await message.answer(
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä", reply_markup=kb.CANCEL_INPUT_LOGIN_CODE_KB
        )
        return

    data = await state.get_data()
    result = await api_client.save_new_login_code(data.get("line_id"), message.text)
    code_message_id = data.get("code_message_id")
    await state.set_state()
    await state.update_data(line_id=None, code_message_id=None)
    await message.answer("–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç" if result else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥")

    with suppress(Exception):
        await message.bot.delete_message(message.chat.id, code_message_id)


@router.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def referral_program_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    intro_text = (
        "<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Mamostore</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º\n"
        "3Ô∏è‚É£ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\n\n"
        "<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ 5Ô∏è‚É£ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî —Å—Ç–∞—Ç—É—Å –°–µ—Ä–µ–±—Ä—è–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (+5% –∫ –±–æ–Ω—É—Å–∞–º)\n"
        "‚Ä¢ üîü —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî —Å—Ç–∞—Ç—É—Å –ó–æ–ª–æ—Ç–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (+10% –∫ –±–æ–Ω—É—Å–∞–º)\n"
        "‚Ä¢ 2Ô∏è‚É£0Ô∏è‚É£ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äî —Å—Ç–∞—Ç—É—Å VIP-–ø–∞—Ä—Ç–Ω–µ—Ä–∞ (+15% –∫ –±–æ–Ω—É—Å–∞–º)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üîó –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É", 
                    callback_data="get_ref_link"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                    callback_data="ref_stats"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", 
                    callback_data="ref_how_it_works"
                )
            ]
        ]
    )
    
    await message.answer(intro_text, reply_markup=keyboard, parse_mode="HTML")


@router.message(Command("ref"))
async def referral_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    try:
        result = await api_client.get_referral_link(user_id)
        
        if result.get("status") and result.get("link"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Telegram
            referral_link = result['link']
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—Ä—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start
            if "t.me/" in referral_link and "?start=" in referral_link:
                bot_username = "Mamoshop_bot"  # –ò–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Å—ã–ª–∫–∏
                referral_code = referral_link.split("?start=")[1]
                
                formatted_link = f"https://t.me/{bot_username}?start={referral_code}"
            else:
                formatted_link = referral_link
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                            callback_data="ref_stats"
                        )
                    ]
                ]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
            text = (
                f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
                f"<code>{formatted_link}</code>\n\n"
                f"<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                f"1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n"
                f"2Ô∏è‚É£ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\n"
                f"3Ô∏è‚É£ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
            )
            
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")