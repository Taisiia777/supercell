# from aiogram import Router, types, F
# from aiogram.fsm.context import FSMContext

# from src.callback_factories import RequestLoginCodeCf
# from src.states import BotState
# from src import keyboards as kb

# router = Router()


# @router.callback_query(RequestLoginCodeCf.filter())
# async def input_login_code(
#     callback_query: types.CallbackQuery,
#     callback_data: RequestLoginCodeCf,
#     state: FSMContext,
# ):
#     await state.update_data(
#         line_id=callback_data.line_id, code_message_id=callback_query.message.message_id
#     )
#     text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {callback_data.email}"
#     await callback_query.message.answer(text)
#     await state.set_state(BotState.INPUT_LOGIN_CODE)
#     await callback_query.answer()


# @router.callback_query(F.data == kb.CANCEL_CODE_CB)
# async def cancel_input_login_code(
#     callback_query: types.CallbackQuery, state: FSMContext
# ):
#     await state.update_data(line_id=None, code_message_id=None)
#     await state.set_state()
#     await callback_query.message.edit_reply_markup()
#     await callback_query.answer()
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from src.callback_factories import RequestLoginCodeCf
from src.states import BotState
from src import keyboards as kb
from customer_api.client import CustomerAPIClient
from customer_api.exceptions import CustomerAPIError

router = Router()
api_client = CustomerAPIClient()
logger = logging.getLogger(__name__)


@router.callback_query(RequestLoginCodeCf.filter())
async def input_login_code(
    callback_query: types.CallbackQuery,
    callback_data: RequestLoginCodeCf,
    state: FSMContext,
):
    await state.update_data(
        line_id=callback_data.line_id, code_message_id=callback_query.message.message_id
    )
    text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {callback_data.email}"
    await callback_query.message.answer(text)
    await state.set_state(BotState.INPUT_LOGIN_CODE)
    await callback_query.answer()


@router.callback_query(F.data == kb.CANCEL_CODE_CB)
async def cancel_input_login_code(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await state.update_data(line_id=None, code_message_id=None)
    await state.set_state()
    await callback_query.message.edit_reply_markup()
    await callback_query.answer()


@router.callback_query(F.data == "ref_stats")
async def referral_stats_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user_id = callback_query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        result = await api_client.get_referral_stats(user_id)
        
        if result.get("status"):
            referrals_count = result.get("referrals_count", 0)
            bonus_points = result.get("bonus_points", 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
            
            if referrals_count > 0:
                text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referrals_count}</b>\n"
                text += f"üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: <b>{bonus_points}</b>\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö
                if referrals_count >= 10:
                    text += "üî• <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä\n"
                    text += "üíé –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +10% –∫ –∫–∞–∂–¥–æ–º—É –±–æ–Ω—É—Å—É!\n\n"
                elif referrals_count >= 5:
                    text += "üî• <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä\n"
                    text += "üíé –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +5% –∫ –∫–∞–∂–¥–æ–º—É –±–æ–Ω—É—Å—É!\n\n"
                
                text += result.get("additional_info", "")
            else:
                text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                            callback_data="ref_stats"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üîó –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É", 
                            callback_data="get_ref_link"
                        )
                    ]
                ]
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", show_alert=True)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "get_ref_link")
async def get_ref_link_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ callback"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = callback_query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer("–ü–æ–ª—É—á–∞–µ–º –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...")
    
    try:
        result = await api_client.get_referral_link(user_id)
        
        if result.get("status") and result.get("link"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Telegram
            referral_link = result['link']
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—Ä—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start
            if "t.me/" in referral_link and "?start=" in referral_link:
                bot_username = "Mamoshop_bot"  # –ò–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Å—ã–ª–∫–∏
                referral_code = referral_link.split("?start=")[1]
                
                formatted_link = f"https://t.me/{bot_username}?start={referral_code}"
            else:
                formatted_link = referral_link
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                            callback_data="ref_stats"
                        )
                    ]
                ]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
            text = (
                f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n"
                f"<code>{formatted_link}</code>\n\n"
                f"<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                f"1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n"
                f"2Ô∏è‚É£ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\n"
                f"3Ô∏è‚É£ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
            await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", show_alert=True)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)


@router.callback_query(F.data == "ref_how_it_works")
async def ref_how_it_works_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    how_it_works_text = (
        "<b>‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "<b>–®–∞–≥ 1:</b> –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ref\n\n"
        "<b>–®–∞–≥ 2:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º —á–µ—Ä–µ–∑ –ª—é–±–æ–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä, —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∏–ª–∏ email\n\n"
        "<b>–®–∞–≥ 3:</b> –ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª\n\n"
        "<b>–®–∞–≥ 4:</b> –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã\n\n"
        "<b>–ë–æ–Ω—É—Å—ã:</b>\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>50 –±–∞–ª–ª–æ–≤</b>\n"
        "‚Ä¢ –ó–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>10% –æ—Ç —Å—É–º–º—ã</b>\n"
        "‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏: <b>5% –æ—Ç —Å—É–º–º—ã</b>\n\n"
        "<b>–£—Ä–æ–≤–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ 5-9 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä</b> (+5% –∫ –±–æ–Ω—É—Å–∞–º)\n"
        "‚Ä¢ 10-19 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>–ó–æ–ª–æ—Ç–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä</b> (+10% –∫ –±–æ–Ω—É—Å–∞–º)\n"
        "‚Ä¢ 20+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>VIP-–ø–∞—Ä—Ç–Ω–µ—Ä</b> (+15% –∫ –±–æ–Ω—É—Å–∞–º)\n\n"
        "–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ 30% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–æ–∫ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="ref_back_to_menu"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üîó –ü–æ–ª—É—á–∏—Ç—å –º–æ—é —Å—Å—ã–ª–∫—É", 
                    callback_data="get_ref_link"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(how_it_works_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "ref_back_to_menu")
async def ref_back_to_menu_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ó–¥–µ—Å—å –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ messages.py
    from src.handlers.messages import referral_program_handler
    
    # –í—ã–∑—ã–≤–∞–µ–º –µ–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ callback
    await referral_program_handler(callback_query.message)
    await callback_query.answer()