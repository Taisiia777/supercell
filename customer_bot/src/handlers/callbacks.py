# from aiogram import Router, types, F
# from aiogram.fsm.context import FSMContext

# from src.callback_factories import RequestLoginCodeCf
# from src.states import BotState
# from src import keyboards as kb

# router = Router()


# @router.callback_query(RequestLoginCodeCf.filter())
# async def input_login_code(
#     callback_query: types.CallbackQuery,
#     callback_data: RequestLoginCodeCf,
#     state: FSMContext,
# ):
#     await state.update_data(
#         line_id=callback_data.line_id, code_message_id=callback_query.message.message_id
#     )
#     text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {callback_data.email}"
#     await callback_query.message.answer(text)
#     await state.set_state(BotState.INPUT_LOGIN_CODE)
#     await callback_query.answer()


# @router.callback_query(F.data == kb.CANCEL_CODE_CB)
# async def cancel_input_login_code(
#     callback_query: types.CallbackQuery, state: FSMContext
# ):
#     await state.update_data(line_id=None, code_message_id=None)
#     await state.set_state()
#     await callback_query.message.edit_reply_markup()
#     await callback_query.answer()
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from src.callback_factories import RequestLoginCodeCf
from src.states import BotState
from src import keyboards as kb
from customer_api.client import CustomerAPIClient

router = Router()
api_client = CustomerAPIClient()


@router.callback_query(RequestLoginCodeCf.filter())
async def input_login_code(
    callback_query: types.CallbackQuery,
    callback_data: RequestLoginCodeCf,
    state: FSMContext,
):
    await state.update_data(
        line_id=callback_data.line_id, code_message_id=callback_query.message.message_id
    )
    text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {callback_data.email}"
    await callback_query.message.answer(text)
    await state.set_state(BotState.INPUT_LOGIN_CODE)
    await callback_query.answer()


@router.callback_query(F.data == kb.CANCEL_CODE_CB)
async def cancel_input_login_code(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await state.update_data(line_id=None, code_message_id=None)
    await state.set_state()
    await callback_query.message.edit_reply_markup()
    await callback_query.answer()


@router.callback_query(F.data == "ref_stats")
async def referral_stats_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    result = await api_client.get_referral_stats(user_id)
    
    if result.get("status"):
        referrals_count = result.get("referrals_count", 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"
        text += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{referrals_count}</b>\n"
        
        if "bonus_points" in result:
            text += f"üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤: <b>{result['bonus_points']}</b>\n"
            
        if "additional_info" in result:
            text += f"\n{result['additional_info']}"
            
        await callback_query.message.edit_text(
            text,
            reply_markup=callback_query.message.reply_markup
        )
    else:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", show_alert=True)