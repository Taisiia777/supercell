# from pathlib import Path

# from aiogram import Router, types
# from aiogram.filters import Command

# from create_bot import settings

# router = Router()

# HELLO_TEXT = (
#     '<b>üéäWelcome! üì≤<a href="https://t.me/Mamoyan_shop">Mamostore</a> '
#     "- —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏ —É—Å–ª—É–≥</b>"
# )

# file = Path(__file__).parent.parent.parent / "static" / "main.png"
# HELLO_IMAGE = types.FSInputFile(file)
# webapp_button = None
# if settings.CUSTOMER_WEBAPP_URL:
#     webapp_button = types.InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 types.InlineKeyboardButton(
#                     text="–ú–∞–≥–∞–∑–∏–Ω",
#                     web_app=types.WebAppInfo(url=str(settings.CUSTOMER_WEBAPP_URL)),
#                 )
#             ]
#         ]
#     )


# @router.message(Command("start"))
# async def start_command(message: types.Message):
#     await message.answer_photo(
#         HELLO_IMAGE, caption=HELLO_TEXT, reply_markup=webapp_button
#     )

#     if settings.CUSTOMER_WEBAPP_URL:
#         await message.bot.set_chat_menu_button(
#             message.from_user.id,
#             menu_button=types.MenuButtonWebApp(
#                 text="–ú–∞–≥–∞–∑–∏–Ω",
#                 web_app=types.WebAppInfo(
#                     url=str(settings.CUSTOMER_WEBAPP_URL),
#                 ),
#             ),
#         )
from pathlib import Path

from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from aiogram.utils.deep_linking import decode_payload, create_start_link

from create_bot import settings, bot
from customer_api.client import CustomerAPIClient

router = Router()
api_client = CustomerAPIClient()

HELLO_TEXT = (
    '<b>üéäWelcome! üì≤<a href="https://t.me/Mamoyan_shop">Mamostore</a> '
    "- —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏ —É—Å–ª—É–≥</b>"
)

file = Path(__file__).parent.parent.parent / "static" / "main.png"
HELLO_IMAGE = types.FSInputFile(file)
webapp_button = None
if settings.CUSTOMER_WEBAPP_URL:
    webapp_button = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ú–∞–≥–∞–∑–∏–Ω",
                    web_app=types.WebAppInfo(url=str(settings.CUSTOMER_WEBAPP_URL)),
                )
            ]
        ]
    )


@router.message(Command("start"))
async def start_command(message: types.Message, command: CommandObject = None):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer_photo(
        HELLO_IMAGE, caption=HELLO_TEXT, reply_markup=webapp_button
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from src import keyboards as kb
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.MAIN_MENU_KB)

    if settings.CUSTOMER_WEBAPP_URL:
        await message.bot.set_chat_menu_button(
            message.from_user.id,
            menu_button=types.MenuButtonWebApp(
                text="–ú–∞–≥–∞–∑–∏–Ω",
                web_app=types.WebAppInfo(
                    url=str(settings.CUSTOMER_WEBAPP_URL),
                ),
            ),
        )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
    if command and command.args:
        referral_code = command.args
        user_id = message.from_user.id
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        result = await api_client.apply_referral_code(user_id, referral_code)
        
        if result.get("status"):
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            error_msg = result.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
            await message.answer(f"‚ÑπÔ∏è {error_msg}")


@router.message(Command("ref"))
async def referral_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    result = await api_client.get_referral_link(user_id)
    
    if result.get("status") and result.get("link"):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                        callback_data="ref_stats"
                    )
                ]
            ]
        )
        
        await message.answer(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{result['link']}\n\n"
            f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
            reply_markup=keyboard
        )
    else:
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")